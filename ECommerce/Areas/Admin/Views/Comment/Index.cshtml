@model List<CommentViewModel>
@{
    var totalComments = Model.Any() ? Model.Count() : 0;
    var size = ViewBag.PageSize;
    var totalPages = (int)Math.Ceiling((double)totalComments / size);
    var currentPage = ViewBag.PageNumber;
}

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 style="color: #7fad39; margin-bottom: 0;">
            <i class="fa fa-comments"></i> Yorum Listesi
        </h2>

        <div class="filter__sort">
            <button class="btn btn-lg site-btn " id="ai-btn">Sınıflandır</button>
        </div>

        <div class="filter__sort">
            <button class="btn site-btn" id="sum-btn">Yorum Özeti Hazırla</button>
        </div>

        <div class="filter__sort">
            <button class="btn site-btn" id="sum-all-btn">Tüm Yorumların Özetini Hazırla</button>
        </div>


        <div class="filter__sort">
            <span>Sırala</span>
            <select id="sort-select" style="display: block;" class="form-select form-select-sm">
                <option value="default">Varsayılan</option>
                <option value="dateAsc">Tarihe Göre: Eskiden Yeniye</option>
                <option value="dateDesc">Tarihe Göre: Yeniden Eskiye</option>
@*                 <option value="totalsoldasc">Satışa Göre: Artan</option>
                <option value="totalsolddesc">Satışa Göre: Azalan</option> *@
            </select>
        </div>
    </div>

    <div class="modern-table-container">
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>Yorum Metni</th>
                    <th>Kullanıcı</th>
                    <th class="shoping__product">Ürün</th>
                    <th>Tarih</th>
                    <th>Durum</th>
                    <th>Aksiyonlar</th>
                </tr>
            </thead>
            <tbody id="comment-table-body">
                
                @if (totalComments >= 0)
                {
                    foreach (var comment in Model)
                    {
                        <tr>

                            <td><span class="order-text">@comment.Text</span></td>
                            <td>@comment.UserName</td>
                            <td class="order-cell"><img class="order-image"  src="@comment.ProductImageUrl" /><span class="order-text">@comment.ProductName</span></td>
                            <td>@comment.CreatedAt.ToShortDateString()</td>
                            <td>
                                @if (!comment.IsReviewed)
                                {
                                    <span class="badge bg-warning">Değerlendirilmeyi Bekliyor</span>
                                }
                                else
                                {
                                    if (comment.IsApproved)
                                    {
                                        <span class="badge bg-success">Onaylandı</span>
                                    }

                                    else if (comment.IsDeleted)
                                    {
                                        <span class="badge bg-info">Silindi</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-danger">Reddedildi</span>
                                    }

                                }

                            </td>
                            <td>
                                @if (!comment.IsApproved)
                                {
                                    <button data-id=@comment.Id class="btn btn-xs site-btn approve-btn"> <i class="fa fa-check approve-btn"></i> Onayla </button>
                                    if (comment.IsDeleted)
                                    {
                                        <button data-id =@comment.Id onclick="restoreComment(@comment.Id)" class="btn btn-xs site-btn restore-btn"> <i class="fa fa-times restore-btn"></i> İptal Et </button>
                                    }
                                    else
                                    {
                                        <button data-id=@comment.Id class="btn btn-xs site-btn delete-btn"> <i class="fa fa-trash-o"></i> Sil </button>
                                    }          
                                }
                                else
                                {
                                    <button data-id=@comment.Id class="btn btn-xs site-btn reject-btn"> <i class="fa fa-cancel reject-btn"></i> Reddet </button>
                                    <button data-id=@comment.Id class="btn btn-xs site-btn delete-btn"> <i class="fa fa-trash-o"></i> Sil </button>
                                }

                            </td>
                        </tr>
                    }
                }
               
            </tbody>
        </table>
    </div>
    <div class="product__pagination">
        @for (int i = 1; i <= totalPages; i++)
        {
            <a class="@(i == currentPage ? "active" : "")" data-page="@i"> @i </a>
        }
    </div>
  
</div>


<style>
.modern-table-container {
    background-color: #ffffff;
    border-radius: 1rem; /* 16px */
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    overflow: hidden; /* İçerik taşmasını engeller ve köşelerin yuvarlatılmasına yardımcı olur */
}

/* Tablo başlık stili */
.modern-table-container .table thead th {
    background-color: #7fad39;
    color: #ffffff;
    font-weight: 600;
}

/* Tablo satırlarına geçiş efekti */
.modern-table-container .table tbody tr:hover {
    background-color: #f5f5f5; /* Hafif gri */
}

/* Buton gruplarını düzenleme */
.modern-table-container .btn-group {
    border-radius: 0.5rem; /* 8px */
}

/* Tabloyu daha düzenli göstermek için */
.modern-table-container .table {
    margin-bottom: 0;
}

.btn-xs {
    padding: .25rem .5rem;
    font-size: .75rem;
    line-height: 1.5;
    border-radius: .2rem;
}

</style>

@section Scripts{


    <script>

        var filter = {
                SearchTerm: null,
                MinDate: null,
                MaxDate: null,
                CategoryId: null,
                ProductId: null,
                ProductId: null,
                IsDeleted: null,
                Page: null
        };

        function fetchComments(pageNumber = 1){
            const cleanFilter = {};
            for(const key in filter){
                if(filter[key] !== null && filter[key] !== "") cleanFilter[key] = filter[key];
            }
            filter.Page = pageNumber;

            const baseUrl = "/Admin/Comment/GetCommentsJSON";
            const queryParams = new URLSearchParams(cleanFilter).toString();
            const tableBody = document.getElementById("comment-table-body");

            fetch(`${baseUrl}?${queryParams}`)
                .then(res => res.json())
                .then(res => {
                    tableBody.innerHTML = '';
                    console.log(res.data);
                    res.data.forEach(comment => {

                        let buttons = ``;
                        let span = ``;
                        if (!comment.isReviewed) {
                            buttons = `<button data-id="${comment.id}" class="btn btn-xs site-btn  approve-btn">
                                                        <i class="fa fa-check"></i> Onayla
                                                    </button>
                                        <button data-id="${comment.id}" class="btn btn-xs site-btn reject-btn">
                                                        <i class="fa fa-cancel "></i> Reddet
                                                    </button>`;

                            span = `<span class="badge bg-warning text-dark">Değerlendirilmeyi Bekliyor</span>`;
                        }
                        else{

                            if (comment.isApproved){
                                buttons = `<button data-id="${comment.id}" class="btn btn-xs site-btn reject-btn">
                                                        <i class="fa fa-cancel "></i> Reddet
                                                    </button>
                                                    <button data-id="${comment.id}" class="btn btn-xs site-btn delete-btn">
                                                        <i class="fa fa-trash-o "></i> Sil
                                                    </button>`;

                                span = '<span class="badge bg-success">Onaylandı</span>';
                            }

                            else if  (comment.isDeleted){
                                buttons = `<button data-id="${comment.id}" onclick="restoreComment(${comment.id})" class="btn btn-xs site-btn restore-btn">
                                                                <i class="fa fa-times "></i> İptal Et
                                                            </button>`


                                span = '<span class="badge bg-info">Silindi</span>';
                            }
                            else{
                                buttons = `<button data-id="${comment.id}" class="btn btn-xs site-btn  approve-btn">
                                                        <i class="fa fa-check"></i> Onayla
                                                    </button>
                                           <button data-id="${comment.id}" class="btn btn-xs site-btn delete-btn">
                                                        <i class="fa fa-trash-o "></i> Sil
                                                    </button>`

                                span = '<span class="badge bg-danger">Reddedildi</span>';
                            }


                        }

                        const row = `
                                   <tr>
                                        <td><span class="order-text">${comment.text}</span></td>
                                        <td>${comment.userName}</td>
                                        <td class="order-cell">
                                            <img class="order-image" src="${comment.productImageUrl}" />
                                            <span class="order-text">${comment.productName}</span>
                                        </td>
                                        <td>${comment.createdAt ? new Date(comment.createdAt).toLocaleDateString() : ''}</td>
                                        <td>
                                            ${span}
                                        </td>
                                        <td>
                                            

                                            ${buttons}
                                        </td>
                                </tr>`;
                        tableBody.innerHTML += row;
                    });
                }) .catch(err =>{
                    console.error(err);
                    Swal.fire({
                        title: "Hata!",
                        text: "Yorumlar getirilirken bir hata ile karşılaşıldı",
                        icon: "error"
                    });
                });
        }

        function restoreComment(commentId){
            Swal.fire({
                title: "Emin misiniz?",
                text: "Bu yorumu tekrar yayına almaktan emin misiniz?",
                icon: "warning",
                showCancelButton: true,
                confirmButtonText: "Evet, yayına al!",
                cancelButtonText: "Hayır, vazgeç"
            }).then(result => {
                if (result.isConfirmed) {
                    fetch(`/Admin/Comment/RestoreDeletedComment?commentId=${commentId}`, {
                        method: 'POST'
                    })
                    .then(res => res.json())
                    .then(res => {
                        Swal.fire(res.success ? "Başarılı" : "Hata", res.message, res.success ? "success" : "error");
                        if (res.success) fetchOrders();
                    });
                }
            });
        }


        function approveComment(id, pageNumber){
            fetch(`/Admin/Comment/Approve/${id}`, { method: 'POST' })
                .then(res => res.json())
                .then(() => fetchComments(pageNumber));
        }

        function deleteComment(id, pageNumber){
            Swal.fire({
                title: "Emin misiniz?",
                text: "Bu yorumu silmek istediğinize emin misiniz?",
                icon: "warning",
                showCancelButton: true,
                confirmButtonText: "Evet, sil!",
                cancelButtonText: "Hayır, vazgeç"
            }).then(result => {
                if(result.isConfirmed){
                    fetch(`/Admin/Comment/Delete/${id}`, { method: 'POST' })
                        .then(res => res.json())
                        .then(() => fetchComments(pageNumber));
                }
            });
        }

        function rejectComment(id, pageNumber){
            fetch(`/Admin/Comment/Reject/${id}`, { method: 'POST' })
                        .then(res => res.json())
                        .then(() => fetchComments(pageNumber));
        }


                function reviewWithLLM() {
            // Loading modal aç
            Swal.fire({
                title: "Yorumlar inceleniyor...",
                html: "Lütfen bekleyin",
                allowOutsideClick: false,
                didOpen: () => {
                    Swal.showLoading();
                }
            });

            fetch("/Admin/Comment/ReviewWithLLM")
                .then(res => res.json())
                .then(res => {
                    Swal.close(); // loading'i kapat
                    if (res.success) {
                        Swal.fire({
                            title: "Başarılı!",
                            text: res.message,
                            icon: "success"
                        });
                        fetchComments(1);
                    } else {
                        Swal.fire({
                            title: "Hata!",
                            text: res.message,
                            icon: "error"
                        });
                    }
                })
                .catch(err => {
                    Swal.close(); // loading'i kapatmayı unutma
                    console.error(err);
                    Swal.fire({
                        title: "Hata!",
                        text: "Yorumlar sınıflandırılırken bir problemle karşılaşıldı",
                        icon: "error"
                    });
                });
        }


        function summarizeWithLLM(){
            // Loading modal açıyoruz
            Swal.fire({
                title: "Ürün özetleri hazırlanıyor...",
                html: "Lütfen bekleyin",
                allowOutsideClick: false, // kullanıcı tıklayarak kapatamasın
                didOpen: () => {
                    Swal.showLoading(); // loading spinner
                }
            });

            fetch("/Admin/Comment/Summarize")
            .then(res => res.json())
            .then(res => {
                Swal.close(); // loading'i kapatıyoruz
                if (res.success){
                    Swal.fire({
                        title: "Başarılı!",
                        text: res.message,
                        icon: "success"
                    });
                    fetchComments(1);
                }
                else{
                    Swal.fire({
                        title: "Hata!",
                        text: res.message,
                        icon: "error"
                    });
                }
            })
            .catch(err => {
                Swal.close(); // loading'i kapatmayı unutma
                console.error(err);
                Swal.fire({
                    title: "Hata!",
                    text: "Ürün özetleri hazırlanırken bir problemle karşılaşıldı",
                    icon: "error"
                });
            });

        }


        function summarizeAllWithLLM() {
            Swal.fire({
                title: "Emin misiniz?",
                text: "Bu işlem uzun sürebilir. Devam etmek istiyor musunuz?",
                icon: "warning",
                showCancelButton: true,
                confirmButtonText: "Evet, devam et",
                cancelButtonText: "Hayır, iptal et"
            })
            .then((result) => {
                if (result.isConfirmed) {
                    fetch("/Admin/Comment/SummarizeAll")
                        .then(res => res.json())
                        .then(res => {
                            if (res.success) {
                                Swal.fire({
                                    title: "Başlatıldı",
                                    text: res.message,
                                    icon: "info"
                                });
                            } 
                            else {
                                Swal.fire({
                                    title: "Hata!",
                                    text: res.message,
                                    icon: "error"
                                });
                            }
                        })
                        .catch(err => {
                            console.error(err);
                            Swal.fire({
                                title: "Hata!",
                                text: "İşlem başlatılamadı",
                                icon: "error"
                            });
                        });
                }
            });
        }



        document.addEventListener("DOMContentLoaded", () => {
            const sortMenu = document.getElementById("sort-select");

            sortMenu.addEventListener("change", (event) => {
                console.log("Change in sort");
                filter.SortBy = event.target.value;
                fetchComments();
            });

            document.getElementById("comment-table-body").addEventListener("click", event => {
                const deleteBtn = event.target.closest(".delete-btn");
                if(deleteBtn) deleteComment(deleteBtn.dataset.id, filter.Page);

                const approveBtn = event.target.closest(".approve-btn");
                if(approveBtn) approveComment(approveBtn.dataset.id, filter.Page);

                const rejectBtn = event.target.closest(".reject-btn");
                if(rejectBtn) rejectComment(rejectBtn.dataset.id, filter.page);

                const restoreBtn = event.target.closest(".restore-btn");
                if (restoreBtn) restoreComment(restoreBtn.dataset.id, filter.page);
            });


            document.getElementById("ai-btn").addEventListener("click", function(){
                reviewWithLLM();
            });

            document.getElementById("sum-btn").addEventListener("click", function(){
                summarizeWithLLM();
            });

            document.getElementById("sum-all-btn").addEventListener("click", function(){
                summarizeAllWithLLM();
            });


            
        });

        


    </script>



}

