@model List<CommentViewModel>
@{
    var totalComments = Model.Any() ? Model.Count() : 0;
    var size = ViewBag.PageSize;
    var totalPages = (int)Math.Ceiling((double)totalComments / size);
    var currentPage = ViewBag.PageNumber;
}

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 style="color: #7fad39; margin-bottom: 0;">
            <i class="fa fa-comments"></i> Yorum Listesi
        </h2>
        <div class="filter__sort">
            <span>Sırala</span>
            <select id="sort-select" style="display: block;" class="form-select form-select-sm">
                <option value="default">Varsayılan</option>
                <option value="dateAsc">Tarihe Göre: Eskiden Yeniye</option>
                <option value="dateDesc">Tarihe Göre: Yeniden Eskiye</option>
                <option value="totalsoldasc">Satışa Göre: Artan</option>
                <option value="totalsolddesc">Satışa Göre: Azalan</option>
            </select>
        </div>
    </div>

    <div class="modern-table-container">
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>Yorum Metni</th>
                    <th>Kullanıcı</th>
                    <th class="shoping__product">Ürün</th>
                    <th>Tarih</th>
                    <th>Durum</th>
                    <th>Aksiyonlar</th>
                </tr>
            </thead>
            <tbody id="comment-table-body">
                
                @if (totalComments >= 0)
                {
                    foreach (var comment in Model)
                    {
                        <tr>

                            <td><span class="order-text">@comment.Text</span></td>
                            <td>@comment.UserName</td>
                            <td class="order-cell"><img class="order-image"  src="@comment.ProductImageUrl" /><span class="order-text">@comment.ProductName</span></td>
                            <td>@comment.CreatedAt.ToShortDateString()</td>
                            <td>
                                @if (comment.IsApproved)
                                {
                                    <span class="badge bg-success">Approved</span>
                                }
                                else
                                {
                                    <span class="badge bg-warning text-dark">Pending</span>
                                }
                                @if (comment.IsDeleted)
                                {
                                    <span class="badge bg-danger">Deleted</span>
                                }
                            </td>
                            <td>
                                <button data-id=@comment.Id class ="btn btn-xs site-btn"> <i class="fa fa-check"></i> Onayla </button>
                                <button data-id=@comment.Id class="btn btn-xs site-btn"> <i class="fa fa-trash-o"></i> Sil </button>
                                <button onclick="restoreComment(@comment.Id)" class="btn btn-xs site-btn"> <i class="fa fa-times"></i> İptal Et </button>
                            </td>
                        </tr>
                    }
                }
               
            </tbody>
        </table>
    </div>
    <div class="product__pagination">
        @for (int i = 1; i <= totalPages; i++)
        {
            <a class="@(i == currentPage ? "active" : "")" data-page="@i"> @i </a>
        }
    </div>
  
</div>


<style>
.modern-table-container {
    background-color: #ffffff;
    border-radius: 1rem; /* 16px */
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    overflow: hidden; /* İçerik taşmasını engeller ve köşelerin yuvarlatılmasına yardımcı olur */
}

/* Tablo başlık stili */
.modern-table-container .table thead th {
    background-color: #7fad39;
    color: #ffffff;
    font-weight: 600;
}

/* Tablo satırlarına geçiş efekti */
.modern-table-container .table tbody tr:hover {
    background-color: #f5f5f5; /* Hafif gri */
}

/* Buton gruplarını düzenleme */
.modern-table-container .btn-group {
    border-radius: 0.5rem; /* 8px */
}

/* Tabloyu daha düzenli göstermek için */
.modern-table-container .table {
    margin-bottom: 0;
}

.btn-xs {
    padding: .25rem .5rem;
    font-size: .75rem;
    line-height: 1.5;
    border-radius: .2rem;
}

</style>

@section Scripts{


    <script>

        var filter = {
                SearchTerm: null,
                MinDate: null,
                MaxDate: null,
                CategoryId: null,
                ProductId: null,
                ProductId: null,
                IsDeleted: null,
                Page: null
        };

        function fetchComments(pageNumber = 1){
            const cleanFilter = {};
            for(const key in filter){
                if(filter[key] !== null && filter[key] !== "") cleanFilter[key] = filter[key];
            }
            filter.Page = pageNumber;

            const baseUrl = "/Admin/Comment/GetCommentsJSON";
            const queryParams = new URLSearchParams(cleanFilter).toString();
            const tableBody = document.getElementById("comment-table-body");

            fetch(`${baseUrl}?${queryParams}`)
                .then(res => res.json())
                .then(res => {
                    tableBody.innerHTML = '';
                    console.log(res.data);
                    res.data.forEach(comment => {
                        const row = `
                            <tr>
                                <td><span class="order-text">${comment.text}</span></td>
                                <td>${comment.userName}</td>
                                 <td class="order-cell"><img class="order-image"  src="${comment.productImageUrl}" /><span class="order-text">${comment.productName}</span></td>
                                <td>${comment.createdAt ? new Date(comment.createdAt).toLocaleDateString() : ''}</td>
                                <td>
                                    ${comment.isApproved ? '<span class="badge bg-success">Approved</span>' : '<span class="badge bg-warning text-dark">Pending</span>'}
                                    ${comment.isDeleted ? '<span class="badge bg-danger">Deleted</span>' : ''}
                                </td>
                                <td>
                                    <button data-id="${comment.id}" class="btn-xs site-btn">
                                        <i class="fa fa-check"></i> Approve
                                    </button>
                                    <button data-id="${comment.id}" class="btn-xs site-btn delete-btn">
                                        <i class="fa fa-trash-o"></i> Delete
                                    </button>
                                    <button onclick="restoreComment(${comment.id})" class="btn btn-xs site-btn"> <i class="fa fa-times"></i> İptal Et </button>
                                </td>
                            </tr>`;
                        tableBody.innerHTML += row;
                    });
                }) .catch(err =>{
                    console.error(err);
                    Swal.fire({
                        title: "Hata!",
                        text: "Yorumlar getirilirken bir hata ile karşılaşıldı",
                        icon: "error"
                    });
                });
        }

        function restoreComment(commentId){
            Swal.fire({
                title: "Emin misiniz?",
                text: "Bu yorumu tekrar yayına almaktan emin misiniz?",
                icon: "warning",
                showCancelButton: true,
                confirmButtonText: "Evet, yayına al!",
                cancelButtonText: "Hayır, vazgeç"
            }).then(result => {
                if (result.isConfirmed) {
                    fetch(`/Admin/Comment/RestoreDeletedComment?commentId=${commentId}`, {
                        method: 'POST'
                    })
                    .then(res => res.json())
                    .then(res => {
                        Swal.fire(res.success ? "Başarılı" : "Hata", res.message, res.success ? "success" : "error");
                        if (res.success) fetchOrders();
                    });
                }
            });
        }


        function approveComment(id, pageNumber){
            fetch(`/Admin/Comment/Approve/${id}`, { method: 'POST' })
                .then(res => res.json())
                .then(() => fetchComments(pageNumber));
        }

        function deleteComment(id, pageNumber){
            Swal.fire({
                title: "Emin misiniz?",
                text: "Bu yorumu silmek istediğinize emin misiniz?",
                icon: "warning",
                showCancelButton: true,
                confirmButtonText: "Evet, sil!",
                cancelButtonText: "Hayır, vazgeç"
            }).then(result => {
                if(result.isConfirmed){
                    fetch(`/Admin/Comment/Delete/${id}`, { method: 'POST' })
                        .then(res => res.json())
                        .then(() => fetchComments(pageNumber));
                }
            });
        }

        document.addEventListener("DOMContentLoaded", () => {
            const sortMenu = document.getElementById("sort-select");

            sortMenu.addEventListener("change", (event) => {
                console.log("Change in sort");
                filter.SortBy = event.target.value;
                fetchComments();
            });

            document.getElementById("comment-table-body").addEventListener("click", event => {
                const deleteBtn = event.target.closest(".delete-btn");
                if(deleteBtn) deleteComment(deleteBtn.dataset.id, filter.Page);

                const approveBtn = event.target.closest(".site-btn");
                if(approveBtn && !approveBtn.classList.contains("delete-btn")) approveComment(approveBtn.dataset.id, filter.Page);
            });

            
        });

        


    </script>



}

