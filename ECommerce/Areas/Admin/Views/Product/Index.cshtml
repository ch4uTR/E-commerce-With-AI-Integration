@model List<ProductViewModel>
@{
    int totalCount = ViewBag.TotalCount;
    int currentPage = ViewBag.CurrentPage;
    int pageSize = ViewBag.PageSize;
    int totalPages = (int)Math.Ceiling((double)totalCount / pageSize);
}

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 style="color: #7fad39; margin-bottom: 0;">
            <i class="fa fa-list"></i> Ürün Listesi
        </h2>

       

        <div class="d-flex align-items-center">
            <div class="filter__sort">
                <span>Kategori</span>
                <select id="category-menu" style="display: block;" class="form-select form-select-sm">
                    <option value="" >Kategori Seçin</option>
                    @foreach (var cat in ViewBag.Categories)
                    {
                        <option value="@cat.Value">@cat.Text</option>
                    }
                </select>

            </div>
            <div class="filter__sort">
                <span>Sırala</span>
                <select id="sort-menu" style="display: block;" class="form-select form-select-sm">
                    <option value="default">Varsayılan</option>
                    <option value="priceasc">Fiayata Göre: Artan</option>
                    <option value="pricedesc">Fiayata Göre: Azalan</option>                  
                    <option value="totalsoldasc">Satışa Göre: Artan</option>
                    <option value="totalsolddesc">Satışa Göre: Azalan</option>
                </select>
            </div>
            <a 
               class="btn btn-success rounded-pill"
               id="create-product-btn"
               style="background-color: #7fad39; border-color: #7fad39; color:#FFF; border-radius:10px; display:block; height:100%">
                <i class="fa fa-plus"></i> Yeni Bir Ürün Oluştur
            </a>           
        </div>
    </div>


    <div id="dynamic-content"></div>


    <div class="modern-table-container">
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>Ürün İsmi</th>
                    <th>Kategori</th>
                    <th>Ücret TL</th>
                    <th>Toplam Satış Miktarı</th>
                    <th>Toplam Hasılat TL</th>
                    <th>Aksiyonlar</th>
                </tr>
            </thead>
            <tbody id="product-table-body">
                @foreach (var product in Model)
                {
                    <tr>
                        <td>@product.ProductName</td>
                        <td>@product.CategoryName</td>
                        <td>@product.Price.ToString("N") TL</td>
                        <td>@product.TotalSoldQuantity</td>
                        <td>@product.TotalRevenue.ToString("N") TL</td>
                        <td>
                            <a asp-action="Edit" asp-route-id="@product.Id" class="btn-xs site-btn"> <i class="fa fa-pencil-square-o"></i> Düzenle </a>
                            <form asp-action="Delete" asp-route-id="@product.Id" method="post" style="display:inline">
                                <button type="submit" class="btn-xs site-btn"> <i class="fa fa-trash-o"></i> Sil </button>
                            </form>
                            <a asp-action="Details" asp-route-id="@product.Id" class="btn-xs site-btn"> <i class="fa fa-info-circle"></i> Detay </a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="product__pagination">
        @for (int i = 1; i <= totalPages; i++)
        {
            <a class="@(i == currentPage ? "active" : "")" data-page="@i"> @i </a>
        }
    </div>
    
</div>

@section SidebarContent {
    <div class="sidebar__item">
        <h4>Fiyat</h4>
        <div class="price-range-wrap">
            <div class="price-range ui-slider ui-corner-all ui-slider-horizontal ui-widget ui-widget-content" id="min-max-div"
                 data-min="@ViewBag.MinPrice" data-max="@ViewBag.MaxPrice">
                <div class="ui-slider-range ui-corner-all ui-widget-header"></div>
                <span tabindex="0" class="ui-slider-handle ui-corner-all ui-state-default"></span>
                <span tabindex="0" class="ui-slider-handle ui-corner-all ui-state-default"></span>
            </div>
            <div class="range-slider">
                <div class="price-input">
                    <input type="text" id="minamount">
                    <input type="text" id="maxamount">
                </div>
            </div>
        </div>
    </div>



}


<style>
    .modern-table-container {
        background-color: #ffffff;
        border-radius: 1rem;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        overflow: hidden;
    }

        .modern-table-container .table thead th {
            background-color: #7fad39;
            color: #ffffff;
            font-weight: 600;
        }

        .modern-table-container .table tbody tr:hover {
            background-color: #f5f5f5;
        }

        .modern-table-container .table {
            margin-bottom: 0;
        }

    .btn-xs {
        padding: .25rem .5rem;
        font-size: .75rem;
        line-height: 1.5;
        border-radius: .2rem;
    }

    .filter__sort span{
        color: #FFFF;
        background: #7fad39;
        display:block;
        border-radius:5px;
        text-align: center;
    }

</style>

@section Scripts {
    <script>


        document.addEventListener("DOMContentLoaded", function(){



            /// create button
            const createButton = document.getElementById("create-product-btn");
            createButton.addEventListener("click", function(e){
                
                const createProductDiv = document.getElementById("dynamic-content");           
                createProductDiv.style.display = "block";
            
            });



            const paginationDiv = document.querySelector(".product__pagination");
            paginationDiv.addEventListener("click", function(event){

                const currentPageAnchor = paginationDiv.querySelector("a.active");
                const anchor = event.target.closest("a");
                if (!anchor) return;

                const page= anchor.dataset.page;

                const urlParams = new URLSearchParams(window.location.search);
                urlParams.forEach((value,key) =>{
                    if (filter.hasOwnProperty(key)){
                        filter[key] = value;
                    }
                });

                filter.Page = page;

                const cleanFilter = {};
                for (const key in filter) {
                    if (filter[key] !== null && filter[key] !== undefined && filter[key] !== "") {
                        cleanFilter[key] = filter[key];
                    }
                }
                console.log(cleanFilter);

                const baseUrl = "/Admin/Product/GetProductDetailsJSON";
                const queryParams = new URLSearchParams(cleanFilter).toString();
                const productTableBody = document.getElementById("product-table-body");

                fetch(`${baseUrl}?${queryParams}`)
                .then(res => res.json())
                .then(res =>{
                    productTableBody.innerHTML = ``;
                    console.log(res.data)
                    res.data.forEach(product =>{


                        const row = `
                        <tr>
                            <td>${product.productName}</td>
                            <td>${product.categoryName}</td>
                            <td>${product.price.toLocaleString()} TL</td>
                            <td>${product.totalSoldQuantity}</td>
                            <td>${product.totalRevenue.toLocaleString()} TL</td>
                            <td>
                                <a asp-action="Edit" asp-route-id="${product.id}" class="btn-xs site-btn"> <i class="fa fa-pencil-square-o"></i> Düzenle </a>
                                <form asp-action="Delete" asp-route-id="${product.id}" method="post" style="display:inline">
                                    <button type="submit" class="btn-xs site-btn"> <i class="fa fa-trash-o"></i> Sil </button>
                                </form>
                                <a asp-action="Details" asp-route-id="${product.id}" class="btn-xs site-btn"> <i class="fa fa-info-circle-o"></i> Detay </a>
                            </td>
                        </tr>`
                        productTableBody.innerHTML += row;
                    });

                    currentPageAnchor.classList.remove("active");
                    anchor.classList.add("active");
                })
                .catch(err =>{
                    console.error(err);
                    Swal.fire({
                        title: "Hata!",
                        text: "Ürünler getirilirken bir hata ile karşılaşıldı",
                        icon: "error"
                    });
                });



            });






            var filter = {
                page: null,
                sortBy: null,
                minPrice: null,
                maxPrice: null,
                categoryId: null,
                searchTerm: null
            };


            ///  Kategoriye göre filtreleme

            const categoryMenu = document.getElementById("category-menu");
            categoryMenu.addEventListener("change", function(event){

                const urlParams = new URLSearchParams(window.location.search)
                urlParams.forEach((value,key) =>{
                    if (filter.hasOwnProperty(key)){
                        filter[key] = value;
                    }
                });

                filter["categoryId"] = event.target.value;
                filter["Page"] = 1;

                const cleanFilter = {};
                for (const key in filter) {
                    if (filter[key] !== null && filter[key] !== undefined && filter[key] !== "") {
                        cleanFilter[key] = filter[key];
                    }
                }
                console.log(cleanFilter);

                const baseUrl = "/Admin/Product/GetProductDetailsJSON";
                const queryParams = new URLSearchParams(cleanFilter).toString();
                const productTableBody = document.getElementById("product-table-body");

                fetch(`${baseUrl}?${queryParams}`)
                .then(res => res.json())
                .then(res =>{
                    productTableBody.innerHTML = ``;
                    console.log(res.data)
                    res.data.forEach(product =>{


                        const row = `
                        <tr>
                            <td>${product.productName}</td>
                            <td>${product.categoryName}</td>
                            <td>${product.price.toLocaleString()} TL</td>
                            <td>${product.totalSoldQuantity}</td>
                            <td>${product.totalRevenue.toLocaleString()} TL</td>
                            <td>
                                <a asp-action="Edit" asp-route-id="${product.id}" class="btn-xs site-btn"> <i class="fa fa-pencil-square-o"></i> Düzenle </a>
                                <form asp-action="Delete" asp-route-id="${product.id}" method="post" style="display:inline">
                                    <button type="submit" class="btn-xs site-btn"> <i class="fa fa-trash-o"></i> Sil </button>
                                </form>
                                <a asp-action="Details" asp-route-id="${product.id}" class="btn-xs site-btn"> <i class="fa fa-info-circle-o"></i> Detay </a>
                            </td>
                        </tr>`
                        productTableBody.innerHTML += row;
                    });

                    const activePage = document.querySelector(".product__pagination a.active");
                    activePage.classList.remove("active");
                    const allPages = document.querySelectorAll(".product__pagination a");
                    const page1 = Array.from(allPages).find(a => a.dataset.page === "1");
                    page1.classList.add("active");
                })
                .catch(err =>{
                    console.error(err);
                    Swal.fire({
                        title: "Hata!",
                        text: "Ürünler getirilirken bir hata ile karşılaşıldı",
                        icon: "error"
                    });
                });



            });

       







            //SORT MENUYE EVENT LISTENER EKLEYEREK DOKÜMAN YÜKLENDİĞİ ANDAN İTİBAREN TETİKLENEBİLİR OLSUN DEĞİŞİKLİKLERLE
            const sortMenu = document.getElementById("sort-menu");
            sortMenu.addEventListener("change", function(event){


                const urlParams = new URLSearchParams(window.location.search)
                urlParams.forEach((value,key) =>{
                    if (filter.hasOwnProperty(key)){
                        filter[key] = value;
                    }
                });

                //sortby ı değiştireyim//
                filter["sortBy"] = event.target.value;
                filter["Page"] = 1;

                const cleanFilter = {};
                for (const key in filter) {
                    if (filter[key] !== null && filter[key] !== undefined && filter[key] !== "") {
                        cleanFilter[key] = filter[key];
                    }
                }
                console.log(cleanFilter);

                const baseUrl = "/Admin/Product/GetProductDetailsJSON";
                const queryParams = new URLSearchParams(cleanFilter).toString();
                const productTableBody = document.getElementById("product-table-body");

                fetch(`${baseUrl}?${queryParams}`)
                .then(res => res.json())
                .then(res =>{
                    productTableBody.innerHTML = ``;
                    console.log(res.data)
                    res.data.forEach(product =>{
                        

                        const row = `
                        <tr>
                            <td>${product.productName}</td>
                            <td>${product.categoryName}</td>
                            <td>${product.price.toLocaleString()} TL</td>
                            <td>${product.totalSoldQuantity}</td>
                            <td>${product.totalRevenue.toLocaleString()} TL</td>
                            <td>
                                <a asp-action="Edit" asp-route-id="${product.id}" class="btn-xs site-btn"> <i class="fa fa-pencil-square-o"></i> Düzenle </a>
                                <form asp-action="Delete" asp-route-id="${product.id}" method="post" style="display:inline">
                                    <button type="submit" class="btn-xs site-btn"> <i class="fa fa-trash-o"></i> Sil </button>
                                </form>
                                <a asp-action="Details" asp-route-id="${product.id}" class="btn-xs site-btn"> <i class="fa fa-info-circle-o"></i> Detay </a>
                            </td>
                        </tr>`
                        productTableBody.innerHTML += row;
                    });

                    const activePage = document.querySelector(".product__pagination a.active");
                    activePage.classList.remove("active");
                    const allPages = document.querySelectorAll(".product__pagination a");
                    const page1 = Array.from(allPages).find(a => a.dataset.page === "1");
                    page1.classList.add("active");
                })
                .catch(err =>{
                    console.error(err);
                    Swal.fire({
                        title: "Hata!",
                        text: "Ürünler getirilirken bir hata ile karşılaşıldı",
                        icon: "error"
                    });
                });



            });



                //// Fiyat değişince tekrar istek atılacak

            const priceInput = document.querySelector(".price-input")
            priceInput.addEventListener("change", function(){

                filterPriceChange();
            });


            $(".price-range").on("slidestop", function(event, ui){
                filterPriceChange();
            });


            function filterPriceChange(){
                const minAmount = document.getElementById("minamount").value;
                const maxAmount = document.getElementById("maxamount").value;
                console.log(minAmount)

                const urlParams = new URLSearchParams(window.location.search);
                urlParams.forEach((value,key) =>{
                    if (filter.hasOwnProperty(key)){
                        filter[key] = value;
                    }
                });

                filter["minPrice"] = parseFloat(minAmount);
                filter["maxPrice"] = parseFloat(maxAmount);
                filter["page"] = 1;

                const cleanFilter = {};
                for (const key in filter) {
                    if (filter[key] !== null && filter[key] !== undefined && filter[key] !== "") {
                        cleanFilter[key] = filter[key];
                    }
                }
                console.log(cleanFilter);
                const baseUrl = "/Product/GetProductsJSON";
                const queryParams = new URLSearchParams(cleanFilter).toString();

                const minMaxDiv = document.getElementById("min-max-div");
                const productTableBody = document.getElementById("product-table-body");

                fetch(`${baseUrl}?${queryParams}`)
                .then(res => res.json())
                .then(res =>{
                    productTableBody.innerHTML = ``;
                    console.log(res.data)
                    minMaxDiv.dataset.min = res.minPrice;
                    minMaxDiv.dataset.max = res.maxPrice;
                    res.data.forEach(product =>{


                        const row = `
                        <tr>
                            <td>${product.productName}</td>
                            <td>${product.categoryName}</td>
                            <td>${product.price.toLocaleString()} TL</td>
                            <td>${product.totalSoldQuantity}</td>
                            <td>${product.totalRevenue.toLocaleString()} TL</td>
                            <td>
                                <a asp-action="Edit" asp-route-id="${product.id}" class="btn-xs site-btn"> <i class="fa fa-pencil-square-o"></i> Düzenle </a>
                                <form asp-action="Delete" asp-route-id="${product.id}" method="post" style="display:inline">
                                    <button type="submit" class="btn-xs site-btn"> <i class="fa fa-trash-o"></i> Sil </button>
                                </form>
                                <a asp-action="Details" asp-route-id="${product.id}" class="btn-xs site-btn"> <i class="fa fa-info-circle"></i> Detay </a>
                            </td>
                        </tr>`
                        productTableBody.innerHTML += row;
                    });
                    const activePage = document.querySelector(".product__pagination a.active");
                    activePage.classList.remove("active");
                    const allPages = document.querySelectorAll(".product__pagination a");
                    const page1 = Array.from(allPages).find(a => a.dataset.page === "1");
                    page1.classList.add("active");

                })
                .catch(err =>{
                    console.error(err);
                    Swal.fire({
                        title: "Hata!",
                        text: "Ürünler getirilirken bir hata ile karşılaşıldı",
                        icon: "error"
                    });
                });

            }





        });

    













        const deleteButtons = document.querySelectorAll("form button[type='submit']");

        deleteButtons.forEach(button => {
            button.addEventListener("click", function(event){
                event.preventDefault();

                Swal.fire({
                    title: "Emin misiniz?",
                    text: "Bu ürünü silmek istediğinize emin misiniz?",
                    icon: "warning",
                    showCancelButton: true,
                    confirmButtonText: "Evet, sil!",
                    cancelButtonText: "Hayır, vazgeç"
                }).then((result) => {
                    if (result.isConfirmed){
                        button.closest("form").submit();
                    }
                });
            });
        });




    </script>
}