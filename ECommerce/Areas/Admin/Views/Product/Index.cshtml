@model List<ProductViewModel>
@{
    int totalCount = ViewBag.TotalCount;
    int currentPage = ViewBag.CurrentPage;
    int pageSize = ViewBag.PageSize;
    int totalPages = (int)Math.Ceiling((double)totalCount / pageSize);
}

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 style="color: #7fad39; margin-bottom: 0;">
            <i class="fa fa-list"></i> Product List
        </h2>

        <div class="d-flex align-items-center>
            <div class="filter__sort">
                <span>Sort By</span>
                <select id="sort-select">
                    <option value="default">Default</option>
                    <option value="priceasc">Price: Low to High</option>
                    <option value="pricedesc">Price: High to Low</option>
                    <option value="totalsolddesc">Total Sold: High to Low</option>
                    <option value="totalsoldasc">Total Sold: High to Low</option>
                </select>
            </div>
            <div class="filter__found">
                <h6><span id="product-count"></span> @Model.Count() /@totalCount Products listed</h6>
            </div>
            <a href="/Admin/Product/Create"
               class="btn btn-success rounded-pill"
               id="create-product-btn"
               style="background-color: #7fad39; border-color: #7fad39;">
                <i class="fa fa-plus"></i> Create New Product
            </a>           
        </div>
    </div>


    <div id="dynamic-content"></div>


    <div class="modern-table-container">
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Category</th>
                    <th>Price <i class="fa fa-dollar"></i></th>
                    <th>Total Sold</th>
                    <th>Total Revenue</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody id="product-table-body">
                @foreach (var product in Model)
                {
                    <tr>
                        <td>@product.ProductName</td>
                        <td>@product.CategoryName</td>
                        <td>@product.Price.ToString("N")</td>
                        <td>@product.TotalSoldQuantity</td>
                        <td>@product.TotalRevenue.ToString("N")</td>
                        <td>
                            <a asp-action="Edit" asp-route-id="@product.Id" class="btn-xs site-btn"> <i class="fa fa-pencil-square-o"></i> Edit </a>
                            <form asp-action="Delete" asp-route-id="@product.Id" method="post" style="display:inline">
                                <button type="submit" class="btn-xs site-btn"> <i class="fa fa-trash-o"></i> Delete </button>
                            </form>
                            <a asp-action="Details" asp-route-id="@product.Id" class="btn-xs site-btn"> <i class="fa fa-info-circle"></i> Details </a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="d-flex justify-content-center mt-4">
        <nav aria-label="Page navigation">
            <ul class="pagination">
                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                    <a class="page-link" href="#" onclick="fetchProducts(@(currentPage - 1))" aria-label="Previous">
                        <span aria-hidden="true">&laquo;</span>
                    </a>
                </li>

                @for (int i = 1; i <= totalPages; i++)
                {
                    <li class="page-item @(i == currentPage ? "active" : "")">
                        <a class="page-link" href="#" onclick="fetchProducts(@i)">@i</a>
                    </li>
                }

                <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                    <a class="page-link" href="#" onclick="fetchProducts(@(currentPage + 1))" aria-label="Next">
                        <span aria-hidden="true">&raquo;</span>
                    </a>
                </li>
            </ul>
        </nav>
    </div>
</div>

@section SidebarContent {
    <div class="sidebar__item">
        <h4>Price</h4>
        <div class="price-range-wrap">
            <div class="price-range ui-slider ui-corner-all ui-slider-horizontal ui-widget ui-widget-content"
                 data-min=@ViewBag.MinPrice data-max=@ViewBag.MaxPrice>
                <div class="ui-slider-range ui-corner-all ui-widget-header"></div>
                <span tabindex="0" class="ui-slider-handle ui-corner-all ui-state-default"></span>
                <span tabindex="0" class="ui-slider-handle ui-corner-all ui-state-default"></span>
            </div>
            <div class="range-slider">
                <div class="price-input">
                    <input type="number" id="minamount" placeholder="Min">
                    <input type="number" id="maxamount" placeholder="Max">
                    <button id="apply-price-filter" class="btn site-btn mt-2" onclick="">Apply</button>
                </div>
            </div>
        </div>
    </div>



}


<style>
    .modern-table-container {
        background-color: #ffffff;
        border-radius: 1rem;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        overflow: hidden;
    }

        .modern-table-container .table thead th {
            background-color: #7fad39;
            color: #ffffff;
            font-weight: 600;
        }

        .modern-table-container .table tbody tr:hover {
            background-color: #f5f5f5;
        }

        .modern-table-container .table {
            margin-bottom: 0;
        }

    .btn-xs {
        padding: .25rem .5rem;
        font-size: .75rem;
        line-height: 1.5;
        border-radius: .2rem;
    }

</style>

@section Scripts {
    <script>
        function fetchProducts(pageNumber = 1, sortBy = 'default', minPrice, maxPrice, categoryId, searchTerm) {
            // 1. Filter objesi
            const filter = {
                page: pageNumber,
                sortBy: sortBy,
                minPrice: minPrice,
                maxPrice: maxPrice,
                categoryId: categoryId,
                searchTerm: searchTerm
            };

            // 2. Query string'e çevir
            const params = new URLSearchParams();
            for (const key in filter) {
                if (filter[key] !== undefined && filter[key] !== null && filter[key] !== "") {
                    params.append(key, filter[key]);
                }
            }

            // 3. URL oluştur - Razor syntax'ı değiştir
            const baseUrl = '/Admin/Product/GetProductDetailsJSON';
            const url = `${baseUrl}?${params.toString()}`;
            console.log(url);
            
            
            fetch(url)
                .then(response => {
                    if (!response.ok) throw new Error('Network response was not ok');
                    return response.json(); 
                })
                .then(data => {
                    const tableBody = document.getElementById('product-table-body');
                    tableBody.innerHTML = '';

                    const productCountElement = document.getElementById('product-count');
                    productCountElement.textContent = data.totalCount || 0;

                    data.data.forEach(product => {
                        const row = `<tr>
                            <td>${product.productName}</td>
                            <td>${product.categoryName}</td>
                            <td>${product.price.toLocaleString()}</td>
                            <td>${product.totalSoldQuantity}</td>
                            <td>${product.totalRevenue.toLocaleString()}</td>
                            <td>
                                <a href="/Admin/Product/Edit/${product.id}" class="btn-xs site-btn">
                                    <i class="fa fa-pencil-square-o"></i> Edit
                                </a>
                                <form action="/Admin/Product/Delete/${product.id}" method="post" style="display:inline">
                                    <button type="submit" class="btn-xs site-btn">
                                        <i class="fa fa-trash-o"></i> Delete
                                    </button>
                                </form>
                                <a href="/Admin/Product/Details/${product.id}" class="btn-xs site-btn">
                                    <i class="fa fa-info-circle"></i> Details
                                </a>
                            </td>
                        </tr>`;
                        tableBody.innerHTML += row;
                    });

                    // Pagination'ı da güncelle
                    updatePagination(data.currentPage, data.totalCount, data.pageSize, sortBy);
                })
                .catch(error => {
                    console.error('Error:', error);
                });
        }

        function updatePagination(currentPage, totalCount, pageSize, sortBy) {
            const totalPages = Math.ceil(totalCount / pageSize);
            const paginationContainer = document.querySelector('.pagination');

            if (!paginationContainer) return;

            paginationContainer.innerHTML = '';

            // Previous button
            const prevLi = document.createElement('li');
            prevLi.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
            prevLi.innerHTML = `<a class="page-link" href="#" onclick="fetchProducts(${currentPage - 1}, '${encodeURIComponent(sortBy)}')" aria-label="Previous">
                <span aria-hidden="true">&laquo;</span>
            </a>`;
            paginationContainer.appendChild(prevLi);

            // Page numbers
            for (let i = 1; i <= totalPages; i++) {
                const pageLi = document.createElement('li');
                pageLi.className = `page-item ${i === currentPage ? 'active' : ''}`;
                pageLi.innerHTML = `<a class="page-link" href="#" onclick="fetchProducts(${i}, '${encodeURIComponent(sortBy)}')">${i}</a>`;
                paginationContainer.appendChild(pageLi);
            }

            // Next button
            const nextLi = document.createElement('li');
            nextLi.className = `page-item ${currentPage === totalPages ? 'disabled' : ''}`;
            nextLi.innerHTML = `<a class="page-link" href="#" onclick="fetchProducts(${currentPage + 1}, '${encodeURIComponent(sortBy)}')" aria-label="Next">
                <span aria-hidden="true">&raquo;</span>
            </a>`;
            paginationContainer.appendChild(nextLi);
        }

        document.addEventListener('DOMContentLoaded', () => {
            const sortSelect = document.getElementById('sort-select');

            const applyPriceFilterBtn = document.getElementById('apply-price-filter');
            const minAmountInput = document.getElementById('minamount');
            const maxAmountInput = document.getElementById('maxamount');



            sortSelect.addEventListener('change', (event) => {
                const selectedSortBy = event.target.value;

                const minPrice = minAmountInput.value || undefined;
                const maxPrice = maxAmountInput.value || undefined;


                console.log(selectedSortBy);
                fetchProducts(1, selectedSortBy, minPrice, maxPrice); // İlk sayfaya geri dön ve sırala
            });

            // Sayfa yüklendiğinde ürün sayısını güncelle
            const productCountElement = document.getElementById('product-count');
            if (productCountElement && !productCountElement.textContent.trim()) {
                const totalCountFromViewBag = @ViewBag.TotalCount;
                productCountElement.textContent = totalCountFromViewBag || 0;
            }
        });

        $(document).ready(function() {
            $('#sort-select').on('change', function() {
                const selectedSortBy = $(this).val();
                console.log('jQuery ile seçilen değer:', selectedSortBy);
                fetchProducts(1, selectedSortBy);
            });
        });

        //         document.getElementById('create-product-btn').addEventListener('click', function (e) {
        //     e.preventDefault(); // Sayfanın yenilenmesini engelle

        //     fetch('/Admin/Product/CreatePartial')
        //         .then(response => response.text())
        //         .then(html => {
        //             document.getElementById('dynamic-content').innerHTML = html;
        //         })
        //         .catch(error => console.error('Error loading create form:', error));
        // });






        ///// delete için onay al


        const deleteButtons = document.querySelectorAll("form button[type='submit']");

        deleteButtons.forEach(button => {
            button.addEventListener("click", function(event){
                event.preventDefault();

                Swal.fire({
                    title: "Emin misiniz?",
                    text: "Bu ürünü silmek istediğinize emin misiniz?",
                    icon: "warning",
                    showCancelButton: true,
                    confirmButtonText: "Evet, sil!",
                    cancelButtonText: "Hayır, vazgeç"
                }).then((result) => {
                    if (result.isConfirmed){
                        button.closest("form").submit();
                    }
                });
            });
        });




    </script>
}